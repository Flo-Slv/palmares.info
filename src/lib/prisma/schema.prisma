datasource db {
  provider = "mongodb"
  url = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
	id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
	refresh_token      String?  @db.String
	access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
	id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
	userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
	id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
	id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sport {
	id         String   @id @default(auto()) @map("_id") @db.ObjectId
	name       String   @unique
	// One to many relation
	athletes   Athlete[]
	// One to many relation
	titles     Title[]
}

enum Gender {
  MAN
  WOMAN
}

model Athlete {
	id           String   @id @default(auto()) @map("_id") @db.ObjectId
	firstname    String
	lastname     String
	nickname     String?  @default("")
	birthdate    DateTime
	birthplace   String
	gender       Gender
	// One to many relation
	sportId      String   @db.ObjectId
  sport        Sport    @relation(fields: [sportId], references: [id])
	// Many to many relation
	titleIDs     String[] @db.ObjectId
	titles       Title[]  @relation(fields: [titleIDs], references: [id])

	@@unique([firstname, lastname, birthdate, birthplace, gender ])
}

model Title {
	id           String     @id @default(auto()) @map("_id") @db.ObjectId
	name         String
	nickname     String?    @default("")
	date         DateTime
	// One to many relation
	sportId      String     @db.ObjectId
	sport        Sport      @relation(fields: [sportId], references: [id])
	// Many to many relation
	athleteIDs   String[]   @db.ObjectId
	athletes     Athlete[]  @relation(fields: [athleteIDs], references: [id])

	@@unique([name, date, sportId])
}
